<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--扫描组件-->
    <context:component-scan base-package="com.czh.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 引入jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!-- 配置Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.name}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--开启事务的注解驱动-->
    <tx:annotation-driven transaction-manager="TransactionManager"></tx:annotation-driven>
    <!--配置SqlSessionFactoryBean-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--核心数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--类型别名所在包其实就是实体类所在的包-->
        <property name="typeAliasesPackage" value="com.czh.ssm.pojo"></property>
       <!-- 配置插件，其中配置文件是数组，数组里选插件-->
        <property name="plugins" >
            <array>
                <bean class="com.github.pagehelper.PageInterceptor"></bean>
            </array>
        </property>
        <property name="mapperLocations" value="classpath:mappers/*.xml">
        </property>
    </bean>
<!-- 以下的功能很重要
1. 通过下面的配置可以直接通过配置的SqlSessionFactoryBean
2.直接获取mapper接口的代理实现类对象直接调用mapper方法
3. 好处是不用每次都通过sqlsession，一步步获取方法了
补充： 通过sqlsession创建代理实现类对象，并将这些对象交给ioc管理-->
    <!-- 扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.czh.ssm.mapper"></property>
    </bean>
</beans>